[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "D | 1 | return book | June 6th"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "E | 0 | project meeting | Aug 6th 2-4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "T | 1 | join sports club"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "E | 1 | birthday party | 6 to 5pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "T | 1 | read book"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 5
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        Storage store \u003d new Storage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        ui.greetUser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        while(!store.getIsExit()){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                parser.getCommand(ui.readCommand(), store, ui);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint(\"â˜¹ OOPS!!! \" +e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "pigoliver": 14
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 7
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " * Parser class handles command parser and identify different keywords with switch cases."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void getCommand (String input,Storage store, Ui ui) throws Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String command, others;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if(input.contains(\" \")){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            command \u003d input.split(\" \",2)[0];"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            others \u003d input.split(\" \",2)[1];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            command \u003d input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            others \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                store.toExit();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.byeToUser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                for(int i\u003d0;i\u003cstore.getSize();i++){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    ui.indentPrint((i+1)+\". \"+store.getTask(i).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                if(others.isEmpty()){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    throw new DukeException(\"The index of a done command cannot be empty.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                index \u003d Integer.parseInt(others);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                store.setDoneAt(index-1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint(\"  \"+store.getTask(index-1).toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                store.saveToFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                if(others.isEmpty()){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    throw new DukeException(\"The index of a delete command cannot be empty.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                index \u003d Integer.parseInt(others);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint(\"  \"+store.deleteTaskAt(index-1).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                store.saveToFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                if(others.isEmpty()){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                store.addToDoToTemp(others);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint(\"  \"+store.getTask(store.getSize()-1).toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint( \"Now you have \"+store.getSize()+\" tasks in the list.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                store.saveToFile();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                if(others.isEmpty()){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                store.addDeadlineToTemp(others);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint(\"  \"+store.getTask(store.getSize()-1).toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint( \"Now you have \"+store.getSize()+\" tasks in the list.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                store.saveToFile();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                if(others.isEmpty()){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    throw new DukeException(\"The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                store.addEventToTemp(others);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint(\"  \"+store.getTask(store.getSize()-1).toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                ui.indentPrint( \"Now you have \"+store.getSize()+\" tasks in the list.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                store.saveToFile();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 81
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " * Storage class handles List of task as tempStorage,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private String storageFilePath\u003d\"../ip/data/duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private ArrayList\u003cTask\u003e tempStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    Storage(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        tempStorage \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            loadFromFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }catch (IOException e){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void loadFromFile() throws IOException{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        File storage\u003dnew File(storageFilePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        BufferedReader fileReader \u003d new BufferedReader(new FileReader(storage));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String savedTask;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        while((savedTask \u003d fileReader.readLine())!\u003dnull) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            String taskType \u003d savedTask.split(\" \\\\| \",4)[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            String isDone \u003d savedTask.split(\" \\\\| \",4)[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            String taskDescription \u003d savedTask.split(\" \\\\| \",4)[2];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            switch(taskType){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    addToDoToTemp(taskDescription);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    if(isDone.matches(\"1\")){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        setDoneAt(getSize()-1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    String taskDeadline \u003d savedTask.split(\" \\\\| \",4)[3];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    tempStorage.add(new Deadline(taskDescription,taskDeadline));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    if(isDone.matches(\"1\")){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        setDoneAt(getSize()-1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    String taskEventTime \u003d savedTask.split(\" \\\\| \",4)[3];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    tempStorage.add(new Event(taskDescription,taskEventTime));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    if(isDone.matches(\"1\")){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        setDoneAt(getSize()-1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        fileReader.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void saveToFile() throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        File storage \u003d new File(storageFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        BufferedWriter toSaveTask \u003d new BufferedWriter(new FileWriter(storage));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        for(int i \u003d 0;i\u003c getSize();i++){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            toSaveTask.write(outputTaskForSave(tempStorage.get(i)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if(i!\u003dgetSize()-1){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                toSaveTask.newLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        toSaveTask.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public String outputTaskForSave(Task toSave){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int isDone\u003d0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if(toSave.getIsDone()){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            isDone\u003d1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if(toSave instanceof Deadline){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            return \"D | \"+isDone+\" | \"+ toSave.getDescription()+ \" | \"+((Deadline) toSave).getBy();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }else if(toSave instanceof Event){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            return \"E | \"+isDone+\" | \"+ toSave.getDescription()+ \" | \"+((Event) toSave).getAt();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }else if(toSave instanceof Todo){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            return \"T | \"+isDone+\" | \"+ toSave.getDescription();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void addToDoToTemp(String toAdd){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        tempStorage.add(new Todo(toAdd));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void addDeadlineToTemp(String toAdd) throws DukeException{"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if(!toAdd.contains(\" /by \")){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            throw new DukeException(\"No /by found in command.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String description \u003d toAdd.split(\" /by \")[0];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if(toAdd.split(\" /by \").length\u003c2){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            throw new DukeException(\"No event time found after keyword /by .\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String by \u003d toAdd.split(\" /by \")[1];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        tempStorage.add(new Deadline(description,by));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void addEventToTemp(String toAdd) throws DukeException{"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if(!toAdd.contains(\" /at \")){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            throw new DukeException(\"No /at found in command.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String description \u003d toAdd.split(\" /at \")[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if(toAdd.split(\" /at \").length\u003c2){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            throw new DukeException(\"No event time found after keyword /at .\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String at \u003d toAdd.split(\" /at \")[1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        tempStorage.add(new Event(description,at));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public Task deleteTaskAt(int i){"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return tempStorage.remove(i);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public int getSize(){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return tempStorage.size();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public Task getTask(int i){"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return tempStorage.get(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void toExit(){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        isExit\u003dtrue;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public boolean getIsExit(){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void setDoneAt(int i){tempStorage.get(i).setDone();}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 128
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " * Ui class handles all the print out to users, and read input from users."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    protected Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void printLine(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void indentPrint(String toPrint){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        System.out.println(\" \"+toPrint);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void greetUser(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        indentPrint(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        indentPrint(\"What can I do for you?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void byeToUser(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        indentPrint(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 27
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class Deadline extends Todo {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public Deadline(String description, String by){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        this.by\u003dby;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return \"[D]\" + \"[\"+getStatusIcon()+\"]\"+\" \"+getDescription() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public String getBy(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 15
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class Event extends Todo {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public Event(String description, String at){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return \"[E]\" + \"[\"+getStatusIcon()+\"]\"+\" \"+getDescription() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public String getAt(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 15
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public abstract String getStatusIcon();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public abstract void setDone();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public abstract void setNotDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public abstract boolean getIsDone();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public String getDescription(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return \"[\"+getStatusIcon()+\"]\"+\" \"+getDescription();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 24
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public Todo(String description){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public boolean getIsDone(){return isDone;}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void setDone(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void setNotDone(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 22
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "deadline return book /by today"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "pigoliver": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "pigoliver": 1
    }
  }
]
